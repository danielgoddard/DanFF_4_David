import numpy as np
from firefly_single import *
import glob
import astropy.io.fits as pyfits
import matplotlib.pyplot as plt

from IPython.core.debugger import Tracer

def firefly_job(job_begin,job_end):

	"""
	This is a wrapper function for running firefly_single
	on multiple data SEDs. For more information on this process,
	see firefly_single.py or the README.

	Given a directory, it analyses all data at the locations
	between [job_begin] (inclusive) percent and [job_end] (exclusive) 
	percent of all the files in the directory.
	e.g. if 1000 files are given and the command is:
	firefly_job([file_dir],10,11)
	FIREFLY will analyses file numbers 100 to 109 in that directory.


	Input:
	- data_dir: 	directory of data SEDs to be analysed
	- job_begin: 	starting percentage of files to analyse (inclusive)
	- job_end: 		finishing percentage of files to analyse (exclusive)


	"""

	parameters 	= parameters_obtain('parameters.py')

	input_dir 	= parameters['file_dir']
	file_list 	= os.listdir(input_dir)#glob.glob(input_dir+'*.dat')

	num_files 	= len(file_list)

	start_job 	= num_files / 100.0 * job_begin
	end_job 	= num_files / 100.0 * job_end


	if parameters['observation_type'] == 'ifu':
		count_ifu = 0
		file_ifu,bin_ifu = [],[]
		for f in range(num_files):
			parameters['file_in'] 		= file_list[f]

			if file_list[f][0]=='.':
				continue
			#Need to loop over bins within the ifu datacube as well as file.
			header      = pyfits.open(parameters['file_dir']+parameters['file_in'],ignore_missing_end=True)
			flux_all    = header['FLUX'].data
			maxshape    = np.shape(flux_all)[1]
			
			#len_ifu += maxshape
			for l in range(maxshape):
				file_ifu.append(parameters['file_dir']+file_list[f])
				bin_ifu.append(l)
				count_ifu += 1

		start_job 	= count_ifu / 100.0 * job_begin
		end_job 	= count_ifu / 100.0 * job_end
		#Tracer()()
		for ff in range(count_ifu):

			if ff < end_job and ff >= start_job:
				parameters['file_in'] 		= file_ifu[ff]
				parameters['output_file'] 	= 	parameters['output_dir_prefix']+\
												parameters['file_in'].split('/')[-1]+'_bin'+str(int(bin_ifu[ff]))+'_single'

				parameters['bin_number'] 	= bin_ifu[ff]

				print "------------------------------------------------------"
				print "List of parameters using to fit:"
				print "------------------------------------------------------"
				for key,value in parameters.iteritems():
					print key+' = '+str(value)
				print "------------------------------------------------------"
				firefly_single(parameters)

				files_present = os.listdir(parameters['output_dir_prefix'])
				if np.size(files_present)>0:
					print "Combining ascii fits files..."
					combine_files = open(parameters['output_dir_prefix']+\parameters['file_in'].split('/')[-1]+s'combined.txt', 'wb')
					combine_files.write("#COMBINED: Light_age / log(Gyrs), light [Z/H], mass age / log(Gyrs), mass [Z/H], E(B-V), stellar mass\n")
					for o in files_present:
						try:
							a = o.split('_')[-3]
						except IndexError:
							continue
						if o.split('_')[-3] == 'single':
							fits 		= np.loadtxt(parameters['output_dir_prefix']+o, skiprows=1, unpack=True)
							xpos		= fits[0]
							ypos		= fits[1]
							bin_number	= fits[2]
							light_age 	= fits[3]
							light_metal = fits[4]
							mass_age 	= fits[5]
							mass_metal 	= fits[6]
							ebv 		= fits[7]
							mass 		= fits[8]
							combine_files.write(str(fits[0])+'\t'+str(fits[1])+'\t'+str(fits[2])+\
												'\t'+str(fits[3])+'\t'+str(fits[4])+'\t'+str(fits[5])+\
												'\t'+str(fits[6])+'\t'+str(fits[7])+'\t'+str(fits[8])+'\n')

					combine_files.close()

	else:
		for f in range(num_files):

			if f < end_job and f >= start_job:

				parameters['file_in'] 		= file_list[f]
				parameters['output_file'] 	= parameters['output_dir_prefix']+parameters['file_in'].split('/')[-1]
				



				print "------------------------------------------------------"
				print "List of parameters using to fit:"
				print "------------------------------------------------------"
				for key,value in parameters.iteritems():
					print key+' = '+str(value)
				print "------------------------------------------------------"
				firefly_single(parameters)
